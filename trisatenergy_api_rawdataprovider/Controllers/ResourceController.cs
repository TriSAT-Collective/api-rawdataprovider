//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."
using Microsoft.AspNetCore;
namespace Com.Example.MyResource
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IMyResourceController
    {

        /// <summary>
        /// Simulations-interne Abfrage eines API Keys f端r Zugriff
        /// </summary>

        /// <param name="user">Der user des angeforderten API keys. Entweder 'ait' oder 'bin'.</param>

        /// <returns>API Key retrieved successfully</returns>

        System.Threading.Tasks.Task<Response> ApikeyAsync(User user);

        /// <summary>
        /// Simulations-interne Abfrage der verf端gbaren MeteringPoints
        /// </summary>

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SimMeteringPoint>> GetMeteringPointsAsync();

        /// <summary>
        /// Wetterdaten eines Standorts
        /// </summary>

        /// <remarks>
        /// Verwendung siehe '/metering-point'
        /// </remarks>

        /// <returns>Success</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WeatherData>> GetWeatherDataAsync(object body);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class MyResourceController : Microsoft.AspNetCore.Mvc.Controller
    {
        private IMyResourceController _implementation;

        public MyResourceController(IMyResourceController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Simulations-interne Abfrage eines API Keys f端r Zugriff
        /// </summary>
        /// <param name="user">Der user des angeforderten API keys. Entweder 'ait' oder 'bin'.</param>
        /// <returns>API Key retrieved successfully</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sim/apikey")]
        public System.Threading.Tasks.Task<Response> Apikey([Microsoft.AspNetCore.Mvc.FromQuery] User user)
        {

            return _implementation.ApikeyAsync(user);
        }

        /// <summary>
        /// Simulations-interne Abfrage der verf端gbaren MeteringPoints
        /// </summary>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("sim/metering-points")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SimMeteringPoint>> GetMeteringPoints()
        {

            return _implementation.GetMeteringPointsAsync();
        }

        /// <summary>
        /// Wetterdaten eines Standorts
        /// </summary>
        /// <remarks>
        /// Verwendung siehe '/metering-point'
        /// </remarks>
        /// <returns>Success</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("weather")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WeatherData>> GetWeatherData([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.GetWeatherDataAsync(body);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IMyResourceController
    {

        /// <summary>
        /// Abfrage der Daten eines MeteringPoints
        /// </summary>

        /// <remarks>
        /// Abfrage der Daten eines Tages oder eines Zeitraums.
        /// <br/>- *id* MUSS immer angegeben sein
        /// <br/>- *date* wird angegeben bei Abfrage eines einzelnen Tages. Dann duerfen *date_begin* und *date_end* NICHT angegeben sein.
        /// <br/>- *date_begin* und *date_end* werden bei einer Abfrage eines ganzen Zeitraumes angegeben. Dann darf *date* NICHT angegeben werden.
        /// </remarks>

        /// <returns>Erfolgreicher API Call</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MeteringData>> DataAsync(object body);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class MyResourceController : Microsoft.AspNetCore.Mvc.Controller
    {
        private IMyResourceController _implementation;

        public MyResourceController(IMyResourceController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Abfrage der Daten eines MeteringPoints
        /// </summary>
        /// <remarks>
        /// Abfrage der Daten eines Tages oder eines Zeitraums.
        /// <br/>- *id* MUSS immer angegeben sein
        /// <br/>- *date* wird angegeben bei Abfrage eines einzelnen Tages. Dann duerfen *date_begin* und *date_end* NICHT angegeben sein.
        /// <br/>- *date_begin* und *date_end* werden bei einer Abfrage eines ganzen Zeitraumes angegeben. Dann darf *date* NICHT angegeben werden.
        /// </remarks>
        /// <returns>Erfolgreicher API Call</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("metering-point")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MeteringData>> Data([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.DataAsync(body);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SimMeteringPoint
    {
        /// <summary>
        /// ID des MeteringPoints. Als UUIDv4 implementiert.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }

        /// <summary>
        /// ID der Position des MeteringPoints. Als UUIDv4 implementiert.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Location { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MeteringData
    {
        [Newtonsoft.Json.JsonProperty("reading", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public long Reading { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Diese Daten sind angelehnt an die von [openweathermap](https://openweathermap.org) bereitgestellten.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeatherData
    {
        /// <summary>
        /// Temperatur in Grad Celsius.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("temperature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-100.0D, 100.0D)]
        public float Temperature { get; set; }

        /// <summary>
        /// Wolkendichte in Prozent
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clouds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 100)]
        public int Clouds { get; set; }

        /// <summary>
        /// Windgeschwindigkeit in Meter pro Sekunde.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wind", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0.0D, double.MaxValue)]
        public float Wind { get; set; }

        /// <summary>
        /// Sonnenaufgang im ISO 8601 Format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sunrise", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Sunrise { get; set; }

        /// <summary>
        /// Sonnenuntergang im ISO 8601 Format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sunset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Sunset { get; set; }

        /// <summary>
        /// Daten-Zeitstempel im ISO 8601 Format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum User
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ait")]
        Ait = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"bin")]
        Bin = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        [Newtonsoft.Json.JsonProperty("api_key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_key { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625